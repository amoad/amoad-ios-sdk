:Version: 3.9.7
:toc: macro
:toc-title: 目次
:toclevels: 4

= AMoAdネイティブ広告 SDK {version} Guide for iOS - listView

toc::[]

:numbered:
:sectnums:

NOTE: SDKのインストール方法につきましては、link:https://github.com/amoad/amoad-ios-sdk/blob/master/Documents/Install/Install.asciidoc[インストールガイド]をご参照ください。

== 導入に必要な実装手順（UITableView）

=== ViewControllerへの実装について
この説明内における下記ファイルは、UITableViewを表示する対象のUIViewControllerを指しています。
（このUIViewControllerにてUITableViewDataSource、UITableViewDelegateプロトコルを実装している想定）

* `SampleTableViewController.h`
* `SampleTableViewController.m`

=== importが必要なヘッダーファイル
必要なヘッダーファイルは下記のみです。

* `AMoAdNativeView.h`

=== 広告準備および事前取得（prepareAdWithSid）
この処理を実行する事により、SID毎に必要な広告の事前取得および、広告表示位置のデフォルト設定を行う。
（上記デフォルト値は、サーバに初回アクセス時まで有効、初回アクセス以降は管理画面上で設定した広告表示位置が基準値となる）

表示広告種類毎に使用するメソッドを実装してください。

1行テキスト::
_prepareAdWithSid:defaultBeginIndex:defaultInterval:_

アイコン画像+テキスト::
_prepareAdWithSid:defaultBeginIndex:defaultInterval:iconPreloading:_

メイン画像+テキスト::
_prepareAdWithSid:defaultBeginIndex:defaultInterval:iconPreloading:imagePreloading:_

下記はアイコン画像+テキスト用の実装サンプルです。

.SampleTableViewController.m
[source,objective-c]
----
#import "AMoAdNativeView.h"

- (void)viewDidLoad {
  /* 省略 */
  [[AMoAdNativeViewManager sharedManager] prepareAdWithSid:self.sid defaultBeginIndex:2 defaultInterval:5 iconPreloading:YES];
  /* 省略 */
}
----

引数については、下記一覧を参照してください。

[options="header"]
|===
|引数名 |表示種類 |説明
|sid |共通 |管理画面から発行される SID を設定してください
|defaultBeginIndex |共通 |広告の開始位置(初回、サーバから取得するまでのデフォルト値)
|defaultInterval |共通 |広告の表示間隔(初回、サーバから取得するまでのデフォルト値)
|iconPreloading |アイコン画像＋テキスト |アイコン画像の読み込み処理タイミングについて。YES：広告取得時に読み込み処理を実施する。NO（デフォルト値）：広告表示時に読み込み処理を実施
|imagePreloading |メイン画像＋テキスト |メイン画像の読み込み処理タイミングについて。YES：広告取得時に読み込み処理を実施する。NO（デフォルト値）：広告表示時に読み込み処理を実施
|===

=== 広告用セルの登録（registerTableView）
テーブル（UITableView）に広告テンプレート（nibName / nib）を登録する

.SampleTableViewController.m
[source,objective-c]
----
#import "AMoAdNativeView.h"

- (void)viewDidLoad {
  /* 省略 */
  [[AMoAdNativeViewManager sharedManager] registerTableView:self.tableView sid:self.sid tag:self.tableTag nibName:self.tableAdCellNibName];
  /* 省略 */
}
----

引数については、下記一覧を参照のこと。

[options="header"]
|===
|引数名 |説明
|tableView |ViewController内で表示するUITableViewオブジェクト
|sid |管理画面から発行される SID を設定してください
|tag |同一リストに対し同一 SID を設定したい場合は Tag (名称任意) を設定する必要がある<br>（同一リスト内において sid + tagがユニークであること）
|nibName / nib |広告用のレイアウトを記述したxibファイルの名称 / もしくはnibオブジェクト
|===

=== 広告を含んだデータソース元となる配列を作成（arrayWithSid）
広告を含んだデータソース元となる配列を作成し、この配列をベースにUITableViewDataSourceの実装に対応する。
なお、リスト表示更新時の注意事項については、別項を参照のこと。

__注意）初回時にarrayWithSidで広告を含んだ配列を生成する前に、prepareAdWithSid、registerTableView（registerCollectionView）を呼び出しておくこと__

.SampleTableViewController.m
[source,objective-c]
----
#import "AMoAdNativeView.h"

@interface SampleTableViewController () <UITableViewDelegate, UITableViewDataSource>
// SDK導入以前にリスト表示用としてAdapterクラスへ渡していたデータソース元の配列
@property(nonatomic) NSMutableArray *newsDataSource;

// SDK導入後に新規に用意する広告データを含んだデータソース元の配列
@property(nonatomic) NSMutableArray *tableDataSource;
@end

@implementation SampleTableViewController
- (void)viewDidLoad {
  /* 省略 */
  [[[AMoAdNativeViewManager sharedManager] arrayWithSid:self.sid tag:self.tableTag originalArray:self.newsDataSource updateAd:NO] mutableCopy];
  /* 省略 */
}
@end
----

引数については、下記一覧を参照のこと。

[options="header"]
|===
|引数名 |説明
|sid |管理画面から発行される SID を設定してください
|tag |同一リストに対し同一 SID を設定したい場合は Tag (名称任意) を設定する必要がある（同一リスト内において sid + tagがユニークであること）
|originalArray |ユーザが元々用意していたデータソース元となる配列
|updateAd |YES:広告の更新が必要。NO:広告の更新が不要
|===

=== 広告用のレイアウトファイル作成

Interface Builderを使用して、広告レイアウトパターン毎にxibファイルを作成する。

レイアウトパターン

* １行テキスト
* アイコン画像＋テキスト
* メイン画像＋テキスト

==== 各パターン毎に必要なレイアウトを作成する
下記表を参考にレイアウトを作成する

[options="header"]
|===
|パターン |オブジェクト |クラス |タグ番号
|アイコン画像＋テキスト |アイコン画像 |UIImageView |1
|メイン画像＋テキスト |メイン画像 |UIImageView |2
|共通 |タイトルショート |UILabel |3
|共通 |タイトルロング |UILabel |4
|共通 |サービス名 |UILabel |5
|共通 |リンク |UIButton、UIImageView、UILabelなど、
UIViewのサブクラス |6
|===

==== レイアウト作成サンプル（アイコン画像＋テキスト）

.クラスはUITableViewCellのままで良い
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/81dcb936-6569-7925-c63b-e4b091e83cd8.png[
"レイアウトサンプル01", width="80%"]

.アイコン画像のタグには _1_ を設定する
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/1a91b05b-5673-8442-62a6-1ffa2e3aa606.png[
"レイアウトサンプル02", width="80%"]

.タイトルロングのタグには _4_ を設定する
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/edfe7cc6-9cb7-adcc-2816-a080bb0b743f.png[
"レイアウトサンプル03", width="80%"]

.サービス名のタグには _5_ を設定する
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/55e0d980-ff12-2134-4ff0-686b4d756194.png[
"レイアウトサンプル04", width="80%"]

.リンクのタグには _6_ を設定する
image:images/n-link.png[
"Interface Builder", width=320]

=== UITableViewDataSourceの実装時における注意事項

__tableView:numberOfRowsInSection:__
広告を含んだデータソース元となる配列のカウントを使用すれば良い。

.SampleTableViewController.m
[source,objective-c]
----
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
  return self.tableDataSource.count;
}
----

__tableView:cellForRowAtIndexPath:__
広告を含んだデータソース元となる配列を利用し、広告行の判定および広告表示用のセルを取得し利用する。

.SampleTableViewController.m
[source,objective-c]
----
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {

  UITableViewCell *cell;

  // 広告行を判定する場合は AMoAdNativeViewItem.class か否かを判定すること
  if ([self.tableDataSource[indexPath.row] isKindOfClass:AMoAdNativeViewItem.class]) {
    AMoAdNativeViewItem *item = self.tableDataSource[indexPath.row];

    // 広告行のセル情報を取得する
    cell = [item tableView:tableView cellForRowAtIndexPath:indexPath];
  } else {
    // 今まで通り、セル取得に使用していたidentifierを指定して、セルを取得する
    cell = [tableView dequeueReusableCellWithIdentifier:self.newsCellIdentifier forIndexPath:indexPath];

    // 使用するデータソース元は新規に作成したself.tableDataSourceを使用すること
    NSDictionary *userContents = self.tableDataSource[indexPath.row];

    // 以降、既存のリスト表示に使用していたcellへのデータ設定を実施するなど
    // 略
  }
  // 略
  return cell;
}
----

=== (任意) リスト表示を更新する際の注意
ユーザデータのプルリフレッシュ（pull to refresh）、
追加読み込み（load more）時にUITableView#reloadDataを実行する前に必ず、
`arrayWithSid:tag:originalArray:updateAd:`を呼び、
更新されたoriginalArrayを渡すとともに、
広告データの更新が必要な場合は`updateAd`にYESを設定してください。

下記は広告の更新が必要な場合のサンプルです。

.SampleTableViewController.m
[source,objective-c]
----
- (void)onRefresh:(UIRefreshControl *)refreshControl {
  // UITableViewに対しUIRefreshControlをaddSubViewし、イベントを設定していると想定
  [refreshControl beginRefreshing];
  [self.sampleDataSource removeAllObjects];
  [self.tableDataSource removeAllObjects];
  self.sampleDataSource = [self createDatasource];

  // (AMoAd) updateAdをYESに指定すると表示中の広告が一新される
  self.tableDataSource = [[[AMoAdNativeViewManager sharedManager] arrayWithSid:self.sid tag:self.tableTag originalArray:self.sampleDataSource updateAd:YES] mutableCopy];

  [self.tableView reloadData];
  [refreshControl endRefreshing];
}
----

また、`originalArray`は、下記のいずれのパターンでも構いません。

* ユーザデータ（self.sampleDataSource）に追加のデータを挿入し、
originalArrayとして渡す場合
* self.tableDataSourceをコピーして、追加のデータを挿入し、
originalArrayとして渡す場合

下記がそのサンプルです。

.SampleTableViewController.m
[source,objective-c]
----
- (void)onLoadMore {

  // (AMoAd) ユーザデータ（self.sampleDataSource）に追加のデータを挿入し、originalArrayとして渡す場合
//   NSUInteger currentCount = self.sampleDataSource.count;
//   NSUInteger maxCount = currentCount + PAGE_COUNT;
//   for (NSUInteger i = currentCount; i < maxCount; i++) {
//   NSString *title = [NSString stringWithFormat:@"News%ld", (long)i];
//   self.sampleDataSource[i] = @{ @"title" : title };
//   }
//   self.tableDataSource = [[[AMoAdNativeViewManager sharedManager] arrayWithSid:self.sid tag:self.tableTag originalArray:self.sampleDataSource updateAd:NO] mutableCopy];


  // (AMoAd) self.tableDataSourceをコピーして、追加のデータを挿入し、originalArrayとして渡す場合
  NSUInteger currentCount = self.tableDataSource.count;
  NSUInteger maxCount = currentCount + PAGE_COUNT;
  NSMutableArray *tableDataSource = [NSMutableArray arrayWithArray:[self.tableDataSource copy]];
  for (NSUInteger i = currentCount; i < maxCount; i++) {
    NSString *title = [NSString stringWithFormat:@"News%ld", (long)i];
    tableDataSource[i] = @{ @"title" : title };
  }
  self.tableDataSource = [[[AMoAdNativeViewManager sharedManager] arrayWithSid:self.sid tag:self.tableTag originalArray:tableDataSource updateAd:NO] mutableCopy];

  [self.tableView reloadData];
}
----

===  (その他) セルごとの高さ設定
既存コンテンツのセルと広告セルの高さが異なる場合のサンプル
(UITableViewDelegateを実装している場合)

.SampleTableViewController.m
[source,objective-c]
----
#pragma mark - UITableViewDelegate

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {

  // (AMoAd) 広告行か否かを判定する
  if ([self.tableDataSource[indexPath.row] isKindOfClass:AMoAdNativeViewItem.class]) {

    // (AMoAd) サンプルの場合、AdMainImageTextTableViewCellのみ height = 264, 他は height = 44
    return 44;
  } else {
    return 44;
  }
}
----

=== 広告デリゲートを設定する
AMoAdNativeListViewDelegate プロトコルを実装したオブジェクトを cellForRowAtIndexPath メソッドのdelegate引数に指定します。

==== 実装例
[source,objective-c]
----
@interface ViewController () <UITableViewDataSource, UITableViewDelegate, AMoAdNativeListViewDelegate> // プロトコルを実装する
@end

@implementation ViewController

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
  UITableViewCell *cell = nil;
  if ([self.tableArray[indexPath.row] isKindOfClass:[AMoAdNativeViewItem class]]) {
    // [SDK] 広告
    AMoAdNativeViewItem *item = self.tableArray[indexPath.row];
    cell = [item tableView:tableView cellForRowAtIndexPath:indexPath delegate:self];
  } else {
    // コンテンツセル...
  }
  if (indexPath.row >= self.tableArray.count - 1) {
    [self onAdd];
  }
  return cell;
}

// 広告情報受信
- (void)amoadNativeDidReceive:(NSString *)sid tag:(NSString *)tag view:(UIView *)view indexPath:(NSIndexPath *)indexPath state:(AMoAdNativeResult)state {
}

// アイコン画像受信
- (void)amoadNativeIconDidReceive:(NSString *)sid tag:(NSString *)tag view:(UIView *)view indexPath:(NSIndexPath *)indexPath state:(AMoAdNativeResult)state {
}

// メイン画像受信
- (void)amoadNativeImageDidReceive:(NSString *)sid tag:(NSString *)tag view:(UIView *)view indexPath:(NSIndexPath *)indexPath state:(AMoAdNativeResult)state {
}

// クリック
- (void)amoadNativeDidClick:(NSString *)sid tag:(NSString *)tag view:(UIView *)view indexPath:(NSIndexPath *)indexPath {
}

@end
----

==== タイミング

image:images/callback_timing.png[
"Delegate Timing", width=90%]

==== ステータス

image:images/callback_status.png[
"Delegate Status", width=90%]

=== 広告のタップ回数を設定する

広告のタップ回数（ダブルクリックの場合は「2」）を指定できます。

[source,objective-c]
----
// [SDK] 描画情報を生成する
AMoAdNativeViewCoder *coder = [[AMoAdNativeViewCoder alloc] init];
coder.numberOfTapsRequired = 2; // タップ回数を指定する

// [SDK] 広告登録（registerTableView）
[[AMoAdNativeViewManager sharedManager] registerTableView:self.tableView sid:kSid tag:kTag
  nibName:kNibName
  coder:coder // ここに広告描画情報を指定する
];
----

=== 文字列に属性を設定する

AMoAdNativeViewCoderを生成し、サービス名、テキストショート、テキストロングの
各プロパティにNSDictionaryオブジェクトでNSAttributedStringに設定する
attributes引数の値を指定してください。
registerTableViewにcoderを渡すことで文字列に属性を設定できます。

[source,objective-c]
----
// [SDK] 描画情報を生成する
AMoAdNativeViewCoder *coder = [[AMoAdNativeViewCoder alloc] init];
NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
[paragraphStyle setMinimumLineHeight:24.0];
[paragraphStyle setMaximumLineHeight:24.0];
coder.serviceNameAttributes = @{ NSForegroundColorAttributeName : [UIColor yellowColor],
                                 NSFontAttributeName : [UIFont systemFontOfSize:14.0f],
                                 NSParagraphStyleAttributeName : paragraphStyle };
[paragraphStyle setMinimumLineHeight:16.0];
[paragraphStyle setMaximumLineHeight:16.0];
coder.titleShortAttributes = @{ NSForegroundColorAttributeName : [UIColor blueColor],
                                NSFontAttributeName : [UIFont systemFontOfSize:13.0f],
                                NSParagraphStyleAttributeName : paragraphStyle };
[paragraphStyle setMinimumLineHeight:14.0];
[paragraphStyle setMaximumLineHeight:14.0];
coder.titleLongAttributes = @{ NSForegroundColorAttributeName : [UIColor redColor],
                               NSFontAttributeName : [UIFont systemFontOfSize:12.0f],
                               NSParagraphStyleAttributeName : paragraphStyle };

// [SDK] 広告登録（registerTableView）
[[AMoAdNativeViewManager sharedManager] registerTableView:self.tableView sid:kSid tag:kTag
  nibName:kNibName
  coder:coder // ここに広告描画情報を指定する
];
----

== 導入に必要な実装手順（UICollectionView）

=== ViewControllerへの実装について
この説明内における下記ファイルは、UICollectionViewを表示する対象のUIViewControllerを指しています。
（このUIViewControllerにてUICollectionViewDataSource、UICollectionViewDelegateプロトコルを実装している想定）

* `SampleCollectionViewController.h`
* `SampleCollectionViewController.m`

=== importが必要なヘッダーファイル
必要なヘッダーファイルは下記のみです。

* `AMoAdNativeView.h`

=== 広告準備および事前取得（prepareAdWithSid）
この処理を実行する事により、SID毎に必要な広告の事前取得および、広告表示位置のデフォルト設定を行う。
（上記デフォルト値は、サーバに初回アクセス時まで有効、初回アクセス以降は管理画面上で設定した広告表示位置が基準値となる）

表示広告種類毎に使用するメソッドを実装してください。

1行テキスト::
_prepareAdWithSid:defaultBeginIndex:defaultInterval:_

アイコン画像+テキスト::
_prepareAdWithSid:defaultBeginIndex:defaultInterval:iconPreloading:_

メイン画像+テキスト::
_prepareAdWithSid:defaultBeginIndex:defaultInterval:iconPreloading:imagePreloading:_

下記はアイコン画像+テキスト用の実装サンプルです。

.SampleCollectionViewController.m
[source,objective-c]
----
#import "AMoAdNativeView.h"

- (void)viewDidLoad {
  /* 省略 */
  [[AMoAdNativeViewManager sharedManager] prepareAdWithSid:self.sid defaultBeginIndex:2 defaultInterval:5 iconPreloading:YES];
  /* 省略 */
}
----

引数については、下記一覧を参照してください。

[options="header"]
|===
|引数名 |表示種類 |説明
|sid |共通 |管理画面から発行される SID を設定してください
|defaultBeginIndex |共通 |広告の開始位置(初回、サーバから取得するまでのデフォルト値)
|defaultInterval |共通 |広告の表示間隔(初回、サーバから取得するまでのデフォルト値)
|iconPreloading |アイコン画像＋テキスト |アイコン画像の読み込み処理タイミングについて。YES：広告取得時に読み込み処理を実施する。NO（デフォルト値）：広告表示時に読み込み処理を実施
|imagePreloading |メイン画像＋テキスト |メイン画像の読み込み処理タイミングについて。YES：広告取得時に読み込み処理を実施する。NO（デフォルト値）：広告表示時に読み込み処理を実施
|===

=== 広告用セルの登録（registerCollectionView）
コレクション（UICollectionView）に広告テンプレート（nibName / nib）を登録する

.SampleCollectionViewController.m
[source,objective-c]
----
#import "AMoAdNativeView.h"

- (void)viewDidLoad {
  /* 省略 */
  [[AMoAdNativeViewManager sharedManager] registerCollectionView:self.tableView sid:self.sid tag:self.collectionTag nibName:self.collectionAdCellNibName];
  /* 省略 */
}
----

引数については、下記一覧を参照のこと。

[options="header"]
|===
|引数名 |説明
|collectionView |ViewController内で表示するUICollectionViewオブジェクト
|sid |管理画面から発行される SID を設定してください
|tag |同一リストに対し同一 SID を設定したい場合は Tag (名称任意) を設定する必要がある<br>（同一リスト内において sid + tagがユニークであること）
|nibName / nib |広告用のレイアウトを記述したxibファイルの名称 / もしくはnibオブジェクト
|===

=== 広告を含んだcollectionView用の配列を作成（arrayWithSid）
オリジナルのデータソースを元に広告を含んだデータソースの配列を作成します。
この配列をベースにUICollectionViewDataSourceの実装に対応する。
なお、リスト表示更新時の注意事項については、別項を参照のこと。

__注意）初回時にarrayWithSidで広告を含んだ配列を生成する前に、prepareAdWithSid、registerCollectionViewを呼び出しておくこと__

.SampleCollectionViewController.m
[source,objective-c]
----
#import "AMoAdNativeView.h"

@interface SampleCollectionViewController () <UICollectionViewDelegate, UICollectionViewDataSource>
// 広告挿入前のデータ（元のデータ）
@property(nonatomic) NSMutableArray *sampleDataSource;

// 新しく作成されるcollectionView用のデータ　（元のデータ＋広告）
@property(nonatomic) NSMutableArray *collectionDataSource;
@end

@implementation SampleCollectionViewController
- (void)viewDidLoad {
  /* 省略 */
  self.collectionDataSource = [[[AMoAdNativeViewManager sharedManager] arrayWithSid:self.sid tag:self.tableTag originalArray:self.sampleDataSource updateAd:NO] mutableCopy];
  /* 省略 */
}
@end
----

引数については、下記一覧を参照のこと。

[options="header"]
|===
|引数名 |説明
|sid |管理画面から発行される SID を設定してください
|tag |同一リストに対し同一 SID を設定したい場合は Tag (名称任意) を設定する必要がある（同一リスト内において sid + tagがユニークであること）
|originalArray |ユーザが元々用意していたデータソース元となる配列
|updateAd |YES:広告の更新が必要。NO:広告の更新が不要
|===

=== 広告用のレイアウトファイル作成

Interface Builderを使用して、広告レイアウトパターン毎にxibファイルを作成する。

レイアウトパターン

* １行テキスト
* アイコン画像＋テキスト
* メイン画像＋テキスト

==== 各パターン毎に必要なレイアウトを作成する
下記表を参考にレイアウトを作成する

[options="header"]
|===
|パターン |オブジェクト |クラス |タグ番号
|アイコン画像＋テキスト |アイコン画像 |UIImageView |1
|メイン画像＋テキスト |メイン画像 |UIImageView |2
|共通 |タイトルショート |UILabel |3
|共通 |タイトルロング |UILabel |4
|共通 |サービス名 |UILabel |5
|共通 |リンク |UIButton、UIImageView、UILabelなど、
UIViewのサブクラス |6
|===

==== レイアウト作成サンプル（アイコン画像＋テキスト）

.クラスはUICollectionViewCellのままで良い
image:images/collectionView-01.png["レイアウトサンプル01", width="80%"]

.アイコン画像のタグには _1_ を設定する
image:images/collectionView-02.png["レイアウトサンプル02", width="80%"]

.タイトルロングのタグには _4_ を設定する
image:images/collectionView-03.png["レイアウトサンプル03", width="80%"]

.サービス名のタグには _5_ を設定する
image:images/collectionView-04.png["レイアウトサンプル04", width="80%"]

.リンクのタグには _6_ を設定する
image:images/n-link.png["Interface Builder", width=320]

=== UICollectionViewDataSourceの実装時における注意事項

__CollectionView:numberOfItemsInSection:__
広告を含んだデータソース元となる配列のカウントを使用すれば良い。

.SampleCollectionViewController.m
[source,objective-c]
----
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {
  return self.collectionDataSource.count;
}
----

__collectionView:cellForItemAtIndexPath:__
広告を含んだデータソース元となる配列を利用し、広告の判定および広告表示用のセルを取得し利用する。

.SampleCollectionViewController.m
[source,objective-c]
----
- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {

  UICollectionViewCell *cell;

  // 広告の判定する場合は AMoAdNativeViewItem.class か否かを判定すること
  if ([self.collectionDataSource[indexPath.row] isKindOfClass:AMoAdNativeViewItem.class]) {
    AMoAdNativeViewItem *item = self.collectionDataSource[indexPath.row];

    // 広告のセル情報を取得する
    cell = [item collectionView:collectionView cellForItemAtIndexPath:indexPath];
  } else {
    // 今まで通り、セル取得に使用していたidentifierを指定して、セルを取得する
    cell = [collectionView dequeueReusableCellWithIdentifier:self.newsCellIdentifier forIndexPath:indexPath];

    // 使用するデータソース元は新規に作成したself.collectionDataSourceを使用すること
    NSDictionary *userContents = self.collectionDataSource[indexPath.row];

    // 以降、既存のリスト表示に使用していたcellへのデータ設定を実施するなど
    // 略
  }
  // 略
  return cell;
}
----

=== (任意) リスト表示を更新する際の注意
ユーザデータのプルリフレッシュ（pull to refresh）、
追加読み込み（load more）時にUICollectionView#reloadDataを実行する前に必ず、
`arrayWithSid:tag:originalArray:updateAd:`を呼び、
更新されたoriginalArrayを渡すとともに、
広告データの更新が必要な場合は`updateAd`にYESを設定してください。

下記は広告の更新が必要な場合のサンプルです。

.SampleCollectionViewController.m
[source,objective-c]
----
- (void)onRefresh:(UIRefreshControl *)refreshControl {
  // UICollectionViewに対しUIRefreshControlをaddSubViewし、イベントを設定していると想定
  [refreshControl beginRefreshing];
  [self.sampleDataSource removeAllObjects];
  [self.collectionDataSource removeAllObjects];
  self.sampleDataSource = [self createDatasource];

  // (AMoAd) updateAdをYESに指定すると表示中の広告が一新される
  self.collectionDataSource = [[[AMoAdNativeViewManager sharedManager] arrayWithSid:self.sid tag:self.collectionTag originalArray:self.sampleDataSource updateAd:YES] mutableCopy];

  [self.collectionView reloadData];
  [refreshControl endRefreshing];
}
----

また、`originalArray`は、下記のいずれのパターンでも構いません。

* ユーザデータ（self.sampleDataSource）に追加のデータを挿入し、
originalArrayとして渡す場合
* self.collectionDataSourceをコピーして、追加のデータを挿入し、
originalArrayとして渡す場合

下記がそのサンプルです。

.SampleCollectionViewController.m
[source,objective-c]
----
- (void)onLoadMore {

  // (AMoAd) ユーザデータ（self.sampleDataSource）に追加のデータを挿入し、originalArrayとして渡す場合
//   NSUInteger currentCount = self.sampleDataSource.count;
//   NSUInteger maxCount = currentCount + PAGE_COUNT;
//   for (NSUInteger i = currentCount; i < maxCount; i++) {
//   NSString *title = [NSString stringWithFormat:@"News%ld", (long)i];
//   self.sampleDataSource[i] = @{ @"title" : title };
//   }
//   self.collectionDataSource = [[[AMoAdNativeViewManager sharedManager] arrayWithSid:self.sid tag:self.tableTag originalArray:self.sampleDataSource updateAd:NO] mutableCopy];


  // (AMoAd) self.collectionDataSourceをコピーして、追加のデータを挿入し、originalArrayとして渡す場合
  NSUInteger currentCount = self.collectionDataSource.count;
  NSUInteger maxCount = currentCount + PAGE_COUNT;
  NSMutableArray *collectionDataSource = [NSMutableArray arrayWithArray:[self.collectionDataSource copy]];
  for (NSUInteger i = currentCount; i < maxCount; i++) {
    NSString *title = [NSString stringWithFormat:@"News%ld", (long)i];
    collectionDataSource[i] = @{ @"title" : title };
  }
  self.collectionDataSource = [[[AMoAdNativeViewManager sharedManager] arrayWithSid:self.sid tag:self.collectionTag originalArray:collectionDataSource updateAd:NO] mutableCopy];

  [self.collectionView reloadData];
}
----

===  (その他) セルごとのサイズ設定
既存コンテンツのセルと広告セルのサイズが異なる場合のサンプル
(UICollectionViewDelegateを実装している場合)

.SampleCollectionViewController.m
[source,objective-c]
----
#pragma mark - UICollectionViewDelegate

- (CGSize)collectionView:(UICollectionView*)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
  // (AMoAd) 広告行か否かを判定する
  if ([self.collectionArray[indexPath.row] isKindOfClass:[AMoAdNativeViewItem class]]) {
    return CGSizeMake(120.0f, 100.0f); // 広告の場合のサイズを(120.0f, 100.0f)にする
  } else {
    return CGSizeMake(100.0f, 100.0f);
  }

}

----

=== 広告デリゲートを設定する
AMoAdNativeListViewDelegate プロトコルを実装したオブジェクトを cellForItemAtIndexPath メソッドのdelegate引数に指定します。

==== 実装例
[source,objective-c]
----
@interface ViewController () <UICollectionViewDataSource, UICollectionViewDelegate, AMoAdNativeListViewDelegate> // プロトコルを実装する
@end

@implementation ViewController

- (UICollectionViewCell *)collectionView:(UIcollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
  UICollectionViewCell *cell = nil;
  if ([self.collectionArray[indexPath.row] isKindOfClass:[AMoAdNativeViewItem class]]) {
    // [SDK] 広告
    AMoAdNativeViewItem *item = self.collectionArray[indexPath.row];
    cell = [item collectionView:collectionView cellForItmeAtIndexPath:indexPath delegate:self];
  } else {
    // コンテンツセル...
  }
  if (indexPath.row >= self.collectionArray.count - 1) {
    [self onAdd];
  }
  return cell;
}

// 広告情報受信
- (void)amoadNativeDidReceive:(NSString *)sid tag:(NSString *)tag view:(UIView *)view indexPath:(NSIndexPath *)indexPath state:(AMoAdNativeResult)state {
}

// アイコン画像受信
- (void)amoadNativeIconDidReceive:(NSString *)sid tag:(NSString *)tag view:(UIView *)view indexPath:(NSIndexPath *)indexPath state:(AMoAdNativeResult)state {
}

// メイン画像受信
- (void)amoadNativeImageDidReceive:(NSString *)sid tag:(NSString *)tag view:(UIView *)view indexPath:(NSIndexPath *)indexPath state:(AMoAdNativeResult)state {
}

// クリック
- (void)amoadNativeDidClick:(NSString *)sid tag:(NSString *)tag view:(UIView *)view indexPath:(NSIndexPath *)indexPath {
}

@end
----

==== タイミング

image:images/callback_timing.png[
"Delegate Timing", width=90%]

==== ステータス

image:images/callback_status.png[
"Delegate Status", width=90%]

=== 広告のタップ回数を設定する

広告のタップ回数（ダブルクリックの場合は「2」）を指定できます。

[source,objective-c]
----
// [SDK] 描画情報を生成する
AMoAdNativeViewCoder *coder = [[AMoAdNativeViewCoder alloc] init];
coder.numberOfTapsRequired = 2; // タップ回数を指定する

// [SDK] 広告登録（registerCollectionView）
[[AMoAdNativeViewManager sharedManager] registerCollectionView:self.collectionView sid:kSid tag:kTag
  nibName:kNibName
  coder:coder // ここに広告描画情報を指定する
];
----

=== 文字列に属性を設定する

AMoAdNativeViewCoderを生成し、サービス名、テキストショート、テキストロングの
各プロパティにNSDictionaryオブジェクトでNSAttributedStringに設定する
attributes引数の値を指定してください。
registerCollectionViewにcoderを渡すことで文字列に属性を設定できます。

[source,objective-c]
----
// [SDK] 描画情報を生成する
AMoAdNativeViewCoder *coder = [[AMoAdNativeViewCoder alloc] init];
NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
[paragraphStyle setMinimumLineHeight:24.0];
[paragraphStyle setMaximumLineHeight:24.0];
coder.serviceNameAttributes = @{ NSForegroundColorAttributeName : [UIColor yellowColor],
                                 NSFontAttributeName : [UIFont systemFontOfSize:14.0f],
                                 NSParagraphStyleAttributeName : paragraphStyle };
[paragraphStyle setMinimumLineHeight:16.0];
[paragraphStyle setMaximumLineHeight:16.0];
coder.titleShortAttributes = @{ NSForegroundColorAttributeName : [UIColor blueColor],
                                NSFontAttributeName : [UIFont systemFontOfSize:13.0f],
                                NSParagraphStyleAttributeName : paragraphStyle };
[paragraphStyle setMinimumLineHeight:14.0];
[paragraphStyle setMaximumLineHeight:14.0];
coder.titleLongAttributes = @{ NSForegroundColorAttributeName : [UIColor redColor],
                               NSFontAttributeName : [UIFont systemFontOfSize:12.0f],
                               NSParagraphStyleAttributeName : paragraphStyle };

// [SDK] 広告登録（registerCollectionView）
[[AMoAdNativeViewManager sharedManager] registerCollectionView:self.collectionView sid:kSid tag:kTag
  nibName:kNibName
  coder:coder // ここに広告描画情報を指定する
];
----

== その他の実装について

=== ログ・トレースの出力方法

link:../Common/Logger.md[ロギング・トレース機能]
