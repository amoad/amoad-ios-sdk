:Version: 3.9.7
:toc: macro
:toc-title: 目次
:toclevels: 4

= AMoAdネイティブ広告 SDK {version} Guide for iOS - nativeApp

toc::[]

:numbered:
:sectnums:

NOTE: SDKのインストール方法につきましては、link:https://github.com/amoad/amoad-ios-sdk/blob/master/Documents/Install/Install.asciidoc[インストールガイド]をご参照ください。

== 導入に必要な実装手順（UIView）

=== importが必要なヘッダーファイル
必要なヘッダーファイルは下記のみです。

* `AMoAdNativeView.h`

=== 広告準備および事前取得（prepareAdWithSid）
この処理を実行する事により、SID毎に必要な広告の事前取得を行う。
表示広告種類毎に使用するメソッドを実装してください。

1行テキスト::
_prepareAdWithSid:_

アイコン画像+テキスト::
_prepareAdWithSid:iconPreloading:_

メイン画像+テキスト::
_prepareAdWithSid:iconPreloading:imagePreloading:_

下記はアイコン画像+テキスト用の実装サンプルです。

.ViewController.m
[source,objective-c]
----
#import "AMoAdNativeView.h"

- (void)viewDidLoad {
  [[AMoAdNativeViewManager sharedManager]
    prepareAdWithSid:kSid iconPreloading:YES];
}
----

引数については、下記一覧を参照してください。

[options="header"]
|===
|引数名 |表示種類 |説明
|sid |共通 |管理画面から発行される SID を設定してください
|iconPreloading |アイコン画像＋テキスト |アイコン画像の読み込み処理タイミングについて。YES：広告取得時に読み込み処理を実施する。NO（デフォルト値）：広告表示時に読み込み処理を実施
|imagePreloading |メイン画像＋テキスト |メイン画像の読み込み処理タイミングについて。YES：広告取得時に読み込み処理を実施する。NO（デフォルト値）：広告表示時に読み込み処理を実施
|===

=== 広告用のレイアウトファイル作成

Interface Builderを使用して、表示広告種類に応じたxibファイルを作成する。

* １行テキスト
* アイコン画像＋テキスト
* メイン画像＋テキスト

==== 各パターン毎に必要なレイアウトを作成する
下記表を参考にレイアウトを作成する

[options="header"]
|===
|要素 |クラス |タグ番号
|アイコン画像 |UIImageView |1
|メイン画像 |UIImageView |2
|タイトルショート |UILabel |3
|タイトルロング |UILabel |4
|サービス名 |UILabel |5
|リンク |UIButton、UIImageView、UILabelなど、
UIViewのサブクラス |6
|===

==== レイアウト作成サンプル（アイコン画像＋テキスト）

.空のXibファイルを新規作成し、UIViewを配置する
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/81dcb936-6569-7925-c63b-e4b091e83cd8.png[
"レイアウトサンプル01", width="80%"]

.アイコン画像のタグには _1_ を設定する
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/1a91b05b-5673-8442-62a6-1ffa2e3aa606.png[
"レイアウトサンプル02", width="80%"]

.タイトルロングのタグには _4_ を設定する
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/edfe7cc6-9cb7-adcc-2816-a080bb0b743f.png[
"レイアウトサンプル03", width="80%"]

.サービス名のタグには _5_ を設定する
image:https://qiita-image-store.s3.amazonaws.com/1726/4107/55e0d980-ff12-2134-4ff0-686b4d756194.png[
"レイアウトサンプル04", width="80%"]

.リンクのタグには _6_ を設定する
image:images/n-link.png[
"Interface Builder", width=320]

=== 広告を表示する
下記は広告を表示するサンプルです。

広告がメインビューに埋め込まれている場合、
IBOutletで取り出したViewに対して描画する

.ViewController.m （失敗Block）
[source,objective-c]
----
- (void)viewDidLoad {
  // [SDK] 広告取得描画（既にあるViewに描画する）
  [[AMoAdNativeViewManager sharedManager] renderAdWithSid:kSid tag:kTag view:self.adView onFailure:^(NSString *sid, NSString *tag, UIView *view) {
    NSLog(@"onFailure: sid=%@ tag=%@ view=%@", sid, tag, view);
  }];
----

.ViewController.m (デリゲート)
[source,objective-c]
----
- (void)viewDidLoad {
  // [SDK] 広告取得描画（既にあるViewに描画する）
  [[AMoAdNativeViewManager sharedManager] renderAdWithSid:kSid tag:kTag view:self.adView delegate:self];
----

=== 広告デリゲートを設定する
AMoAdNativeAppDelegate プロトコルを実装したオブジェクトを renderAd メソッドのdelegate引数に指定します。

==== 実装例
[source,objective-c]
----
@interface ViewController () <AMoAdNativeAppDelegate> // プロトコルを実装する
@end

@implementation ViewController

- (void)viewDidLoad {
  // ...
  // [SDK] 広告取得描画（既にあるViewに描画する）
  [[AMoAdNativeViewManager sharedManager] renderAdWithSid:kSid tag:kTag view:self.adView delegate:self];
}

// 広告情報受信
- (void)amoadNativeDidReceive:(NSString *)sid tag:(NSString *)tag view:(UIView *)view state:(AMoAdNativeResult)state {
}

// アイコン画像受信
- (void)amoadNativeIconDidReceive:(NSString *)sid tag:(NSString *)tag view:(UIView *)view state:(AMoAdNativeResult)state {
}

// メイン画像受信
- (void)amoadNativeImageDidReceive:(NSString *)sid tag:(NSString *)tag view:(UIView *)view state:(AMoAdNativeResult)state {
}

// クリック
- (void)amoadNativeDidClick:(NSString *)sid tag:(NSString *)tag view:(UIView *)view {
}

@end
----

==== タイミング

image:images/callback_timing.png[
"Delegate Timing", width=90%]

==== ステータス

image:images/callback_status.png[
"Delegate Status", width=90%]

=== 広告のタップ回数を設定する

広告のタップ回数（ダブルクリックの場合は「2」）を指定できます。

[source,objective-c]
----
// [SDK] 描画情報を生成する
AMoAdNativeViewCoder *coder = [[AMoAdNativeViewCoder alloc] init];
coder.numberOfTapsRequired = 2; // タップ回数を指定する

// [SDK] 広告取得描画（既にあるViewに描画する）
[[AMoAdNativeViewManager sharedManager] renderAdWithSid:kSid tag:kTag
  view:self.adView
  coder:coder   // 描画情報を指定する
  delegate:self];
----

=== 文字列に属性を設定する

AMoAdNativeViewCoderを生成し、サービス名、テキストショート、テキストロングの
各プロパティにNSDictionaryオブジェクトでNSAttributedStringに設定する
attributes引数の値を指定してください。
renderAdにcoderを渡すことで文字列に属性を設定できます。

[source,objective-c]
----
// [SDK] 描画情報を生成する
AMoAdNativeViewCoder *coder = [[AMoAdNativeViewCoder alloc] init];
NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
[paragraphStyle setMinimumLineHeight:24.0];
[paragraphStyle setMaximumLineHeight:24.0];
coder.serviceNameAttributes = @{ NSForegroundColorAttributeName : [UIColor yellowColor],
                                 NSFontAttributeName : [UIFont systemFontOfSize:14.0f],
                                 NSParagraphStyleAttributeName : paragraphStyle };
[paragraphStyle setMinimumLineHeight:16.0];
[paragraphStyle setMaximumLineHeight:16.0];
coder.titleShortAttributes = @{ NSForegroundColorAttributeName : [UIColor blueColor],
                                NSFontAttributeName : [UIFont systemFontOfSize:13.0f],
                                NSParagraphStyleAttributeName : paragraphStyle };
[paragraphStyle setMinimumLineHeight:14.0];
[paragraphStyle setMaximumLineHeight:14.0];
coder.titleLongAttributes = @{ NSForegroundColorAttributeName : [UIColor redColor],
                               NSFontAttributeName : [UIFont systemFontOfSize:12.0f],
                               NSParagraphStyleAttributeName : paragraphStyle };

// [SDK] 広告取得描画（既にあるViewに描画する）
[[AMoAdNativeViewManager sharedManager] renderAdWithSid:kSid tag:kTag
  view:self.adView
  coder:coder   // 描画情報を指定する
  delegate:self];
----

=== 広告表示を更新する
下記は広告を更新するサンプルです。

.ViewController.m
[source,objective-c]
----
- (IBAction)performUpdate:(id)sender
{
  [[AMoAdNativeViewManager sharedManager]
    updateAdWithSid:kSid tag:kTag];
}
----

=== 広告表示をクリアする
下記は広告をクリアするサンプルです。

.ViewController.m
[source,objective-c]
----
- (IBAction)performClear:(id)sender
{
  [[AMoAdNativeViewManager sharedManager]
    clearAdWithSid:kSid tag:kTag];
}
----

== その他の実装について

=== ログ・トレースの出力方法

link:../Common/Logger.md[ロギング・トレース機能]
